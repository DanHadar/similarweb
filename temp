            // // for ( let fileIndex = 0; fileIndex < files.length; fileIndex++ ) { //loop over the new files
            // const fileName = 'merge and sort';
            // console.log( 'start ' + fileName );
            // console.time( fileName );
            // // const fileName = files[ fileIndex ];
            // // const csvJson = await readCsvAsJson( `${ newStaticFilesPath }/${ fileName }` ); //read csv as array
            // global.visitorSessions = csvJson.reduce( function ( visitorSessions, row ) { //loop over rows in the csv
            //     //--- initializing
            //     [ visitorId, site, , ts ] = row;
            //     ts = ts * 1000;
            //     let currentVisitorSessions = visitorSessions[ visitorId ];
            //     currentVisitorSessions || ( currentVisitorSessions = { sessions: {}, uniqueSites: {} } );
            //     global.siteVisits[ site ] || ( global.siteVisits[ site ] = 0 );
            //     currentVisitorSessions[ 'uniqueSites' ][ site ] || ( currentVisitorSessions[ 'uniqueSites' ][ site ] = true );
            //     let currentSiteSessions = currentVisitorSessions[ 'sessions' ][ site ];

            //     //--- first session in id+site
            //     if ( !currentSiteSessions ) {
            //         global.siteVisits[ site ] += 1;
            //         currentVisitorSessions[ 'sessions' ][ site ] = [ { firstVisit: ts, lastVisit: ts } ];
            //     }
            //     else {
            //         for ( i = currentSiteSessions.length - 1; i >= 0; i-- ) { //loop over exists session of id+site
            //             const currentSession = currentSiteSessions[ i ];
            //             if ( tsDiffInMin( ts, currentSession.lastVisit ) > 30 ) { // new object to the array if needed
            //                 if ( ts !== currentSiteSessions[ i + 1 ]?.firstVisit ) {
            //                     global.siteVisits[ site ] += 1;
            //                     currentSiteSessions.splice( i + 1, 0, { firstVisit: ts, lastVisit: ts } );
            //                 }
            //                 else {
            //                     console.log( 'hi' );
            //                 }
            //                 break;
            //             }
            //             else if ( ts >= currentSession.lastVisit ) { // update last and remove next obj in arr if needed
            //                 if ( ts === currentSiteSessions[ i + 1 ]?.firstVisit ) { //merge sessions
            //                     currentSession.lastVisit = currentSiteSessions[ i + 1 ].lastVisit;
            //                     global.siteVisits[ site ] -= 1;
            //                     currentSiteSessions.splice( i + 1, 1 );
            //                 }
            //                 else currentSession.lastVisit = ts;
            //                 break;
            //             }
            //             else if ( ts >= currentSession.firstVisit ) break; //no changes needed
            //             else if ( tsDiffInMin( currentSession.firstVisit, ts ) <= 30 ) currentSession.firstVisit = ts; { //update session if needed and continue to next iteration
            //             }
            //         }
            //     }
            //     visitorSessions[ visitorId ] = currentVisitorSessions;
            //     return visitorSessions;
            // }, ( global.visitorSessions || {} ) );
            // console.timeEnd( fileName );
            // console.log( 'end ' + fileName );
            // }
            // const csvJson = await readCsvAsJson( `${ newStaticFilesPath }/input_1.csv` );