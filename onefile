            // const newStaticFilesPath = `${ process.cwd() }${ config.NEW_STATIC_FILES_PATH }`;
            // const files = fs.readdirSync( newStaticFilesPath );
            // const fileName = 'merge and sort';
            // console.log( 'start ' + fileName );
            // console.time( fileName );
            // const csvJson1 = await readCsvAsJson( `${ newStaticFilesPath }/input_1.csv` ); //read csv as array
            // const csvJson2 = await readCsvAsJson( `${ newStaticFilesPath }/input_2.csv` ); //read csv as array
            // const csvJson3 = await readCsvAsJson( `${ newStaticFilesPath }/input_3.csv` ); //read csv as array
            // let finalArr = [ ...csvJson1, ...csvJson2, ...csvJson3 ];
            // const csvJson = finalArr.sort( ( a, b ) => a[ 3 ] - b[ 3 ] );
            // global.visitorSessions = csvJson.reduce( function ( visitorSessions, row ) { //loop over rows in the csv
            //     //--- initializing
            //     [ visitorId, site, , ts ] = row;
            //     ts = ts * 1000;
            //     let currentVisitorSessions = visitorSessions[ visitorId ];
            //     currentVisitorSessions || ( currentVisitorSessions = { sessions: {}, uniqueSites: {} } );
            //     global.siteVisits[ site ] || ( global.siteVisits[ site ] = { sessionsCount: 0, sumSessionsLength: 0 } );
            //     currentVisitorSessions[ 'uniqueSites' ][ site ] || ( currentVisitorSessions[ 'uniqueSites' ][ site ] = true );
            //     currentVisitorSessions[ 'sessions' ][ site ] || ( currentVisitorSessions[ 'sessions' ][ site ] = [] );

            //     //--- fill sessions data
            //     let currentSiteSessions = currentVisitorSessions[ 'sessions' ][ site ];
            //     const lastSession = currentSiteSessions[ currentSiteSessions.length - 1 ];
            //     if ( !lastSession || tsDiffInMin( ts, lastSession.lastVisit ) > 30 ) {
            //         global.siteVisits[ site ][ 'sessionsCount' ] += 1;
            //         currentSiteSessions.push( { firstVisit: ts, lastVisit: ts } );
            //     }
            //     else {
            //         global.siteVisits[ site ][ 'sumSessionsLength' ] -= tsDiffInSec( lastSession.lastVisit, lastSession.firstVisit );
            //         lastSession.lastVisit = ts;
            //         global.siteVisits[ site ][ 'sumSessionsLength' ] += tsDiffInSec( lastSession.lastVisit, lastSession.firstVisit );
            //     }
            //     visitorSessions[ visitorId ] = currentVisitorSessions;
            //     return visitorSessions;
            // }, ( global.visitorSessions || {} ) );
            // console.timeEnd( fileName );
            // console.log( 'end ' + fileName );